{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bemvindo ao MkDocs","text":""},{"location":"#workflow","title":"Workflow","text":"<p>mermaid</p> <pre><code>gantt\ndateFormat  YYYY-MM-DD\ntitle Adding GANTT diagram to mermaid\nexcludes weekdays 2014-01-10\n\nsection A section\nCompleted task            :done,    des1, 2014-01-06,2014-01-08\nActive task               :active,  des2, 2014-01-09, 3d\nFuture task               :         des3, after des2, 5d\nFuture task2               :         des4, after des3, 5d\n</code></pre>"},{"location":"#funcao-de-transformacao-de-dados","title":"Fun\u00e7\u00e3o de transforma\u00e7\u00e3o de dados","text":"<p>extract_from_excel: Ler arquivos de data/input, retornar lista de dataframes.</p> <p>Parameters:</p> Name Type Description Default <code>input_path</code> <code>str</code> <p>caminho da pasta input</p> required <p>Returns:</p> Type Description <code>List[DataFrame]</code> <p>lista de dataframes</p> Source code in <code>app\\pipeline\\extract.py</code> <pre><code>def extract_from_excel(path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"extract_from_excel: Ler arquivos de data/input, retornar lista de dataframes.\n\n    Args:\n        input_path (str): caminho da pasta input\n\n    Returns:\n        lista de dataframes\n    \"\"\"\n    all_files = glob.glob(\n        os.path.join(path, '*.xlsx')\n    )   # lista todos os arquivos .xlsx da pasta\n\n    dataframe_list = []   # lista para armazenar os dataframes\n    for file in all_files:\n        dataframe_list.append(\n            pd.read_excel(file)\n        )   # adiciona o dataframe na lista\n\n    return dataframe_list   # retorna a lista de dataframes\n</code></pre> <p>Fun\u00e7\u00e3o para receber um dataframe e salvar como excel.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>dataframe a ser salvo como excel</p> required <code>output_path</code> <code>str</code> <p>caminho para salvar o arquivo excel</p> required <code>file_name</code> <code>str</code> <p>nome do arquivo excel</p> required <code>return</code> <p>retorna \"Arquivo Salvo com Sucesso\"</p> required Source code in <code>app\\pipeline\\load.py</code> <pre><code>def load_excel(\n    dataframe: pd.DataFrame, output_path: str, file_name: str\n) -&gt; str:\n    \"\"\"Fun\u00e7\u00e3o para receber um dataframe e salvar como excel.\n\n    Args:\n        dataframe (pd.DataFrame): dataframe a ser salvo como excel\n        output_path (str): caminho para salvar o arquivo excel\n        file_name (str): nome do arquivo excel\n        return: retorna \"Arquivo Salvo com Sucesso\"\n\n    \"\"\"\n    if not os.path.exists(output_path):\n        os.makedirs(output_path)\n\n    dataframe.to_excel(f'{output_path}/{file_name}.xlsx', index=False)\n    return 'Arquivo Salvo com Sucesso'\n</code></pre> <p>contact_data_frames: Fun\u00e7\u00e3o para transformar uma lista de dataframes em um \u00fanico dataframe.</p> <p>Args: dataframe_list: List[pd.DataFrame]: caminho da pasta input</p> <p>Returns: pd.DataFrame: lista de dataframes</p> Source code in <code>app\\pipeline\\transform.py</code> <pre><code>def contact_data_frames(dataframe_list: List[pd.DataFrame]) -&gt; pd.DataFrame:\n    \"\"\"contact_data_frames: Fun\u00e7\u00e3o para transformar uma lista de dataframes em um \u00fanico dataframe.\n\n        Args:\n        dataframe_list: List[pd.DataFrame]: caminho da pasta input\n\n        Returns:\n        pd.DataFrame: lista de dataframes\n\n    \"\"\"\n    return pd.concat(dataframe_list)\n</code></pre>"}]}